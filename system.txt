
sudo apt install php5.6-common php5.6-fpm php5.6-mysql php5.6-xml php5.6-curl php5.6-gd php5.6-imagick php5.6-cli php5.6-imap php5.6-mbstring php5.6-opcache php5.6-soap php5.6-zip php5.6-intl -y

sudo apt install php7.0-common php7.0-fpm php7.0-mysql php7.0-xml php7.0-curl php7.0-gd php7.0-imagick php7.0-cli php7.0-imap php7.0-mbstring php7.0-opcache php7.0-soap php7.0-zip php7.0-intl -y

sudo apt install php7.1-common php7.1-fpm php7.1-mysql php7.1-xml php7.1-curl php7.1-gd php7.1-imagick php7.1-cli php7.1-imap php7.1-mbstring php7.1-opcache php7.1-soap php7.1-zip php7.1-intl -y

sudo apt install php8.1-common php8.1-fpm php8.1-mysql php8.1-xml php8.1-curl php8.1-gd php8.1-imagick php8.1-cli php8.1-imap php8.1-mbstring php8.1-opcache php8.1-soap php8.1-zip php8.1-intl -y

sudo apt install php8.2-common php8.2-fpm php8.2-mysql php8.2-xml php8.2-curl php8.2-gd php8.2-imagick php8.2-cli php8.2-imap php8.2-mbstring php8.2-opcache php8.2-soap php8.2-zip php8.2-intl -y

sudo apt install php8.3-common php8.3-fpm php8.3-mysql php8.3-xml php8.3-curl php8.3-gd php8.3-imagick php8.3-cli php8.3-imap php8.3-mbstring php8.3-opcache php8.3-soap php8.3-zip php8.3-intl libapache2-mod-php8.3 -y

$ sudo apt install php8.1 libapache2-mod-php8.1
$ sudo update-alternatives --config php
 php --version

pm2 start npm --name "daman-app" -- start
pm2 save
pm2 startup


MongoDB
wget -qO - https://www.mongodb.org/static/pgp/server-8.0.asc | sudo apt-key add -
echo "deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu jammy/mongodb-org/8.0 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-8.0.list
sudo apt update
sudo apt install -y mongodb-org
sudo systemctl start mongod
sudo systemctl enable mongod
sudo systemctl status mongod
mongosh

If MongoDB is running locally:
mongosh
If remote with authentication:
mongosh "mongodb://username:password@host:27017/admin"
Create a Database
use mydatabase
Create a User for This Database
db.createUser({
  user: "myuser",
  pwd: "mypassword",
  roles: [
    { role: "readWrite", db: "mydatabase" }
  ]
});

Verify User Creation : show users
mongosh "mongodb://myuser:mypassword@localhost:27017/mydatabase"

Create Admin User in admin DB:
use admin
db.createUser({
  user: "admin",
  pwd: "StrongPassword123",
  roles: [ { role: "root", db: "admin" } ]
})
=====================================
curl -sL https://deb.nodesource.com/setup_20.x -o nodesource_setup.sh
sudo bash nodesource_setup.sh
sudo apt install nodejs
apt install -g pm2

sudo apt update
sudo apt install -y jq





https://technoupdate.medium.com/how-to-configure-gitlab-runner-on-ubuntu-22-04-lts-3588a47a2d0a
Official GitLab Repository
curl -L "https://packages.gitlab.com/install/repositories/runner/gitlab-runner/script.deb.sh" | sudo bash
sudo apt-get install gitlab-runner
sudo gitlab-runner -version
sudo gitlab-runner status
sudo gitlab-runner start
sudo gitlab-runner enable

sudo visudo
gitlab-runner ALL=(ALL:ALL) ALL
gitlab-runner ALL=(ALL) NOPASSWD: ALL 

sudo usermod -aG docker gitlab-runner
sudo systemctl restart gitlab-runner

sudo apt update 
sudo apt install certbot python3-certbot-apache  # For Apache 
sudo apt install certbot python3-certbot-nginx   # For Nginx 

sudo yum install epel-release
sudo yum install certbot python2-certbot-apache  # For Apache
sudo yum install certbot python2-certbot-nginx   # For Nginx

sudo certbot --apache -d your_domain -d www.your_domain 
sudo certbot renew --dry-run


How To Find your Server’s Public IP Address
ip addr show ens3 | grep inet | awk '{ print $2; }' | sed 's/\/.*$//'

ssl csr genterate 
openssl genrsa -out  alt.app.key 4096
openssl req -new -key al.app.key -out altcom.app.csr

node:
curl -sL https://deb.nodesource.com/setup_20.x -o nodesource_setup.sh
sudo bash nodesource_setup.sh
sudo apt install nodejs

sudo swapon --show
sudo fallocate -l 1G /swapfile
ls -lh /swapfile
sudo chmod 600 /swapfile
ls -lh /swapfile
sudo mkswap /swapfile
sudo swapon /swapfile
sudo swapon --show
sudo cp /etc/fstab /etc/fstab.bak
echo '/swapfile none swap sw 0 0' | sudo tee -a /etc/fstab

sudo npm install pm2@latest -g

sudo update-alternatives --set php /usr/bin/php8.2 
sudo update-alternatives --set phar /usr/bin/phar8.2 
sudo update-alternatives --set phar.phar /usr/bin/phar.phar8.2 

sudo apt install libapache2-mod-php8.1
sudo apt install php8.1-curl
sudo apt install php8.1-mbstring php8.1-intl php8.1-pspell
sudo apt install php-mbstring php-intl php-pspell
sudo apt install php8.1-imap
sudo apt install php8.1-tidy php8.1-xmlrpc
# Excel
sudo apt install php8.1-xsl
sudo apt install php8.1-opcache
sudo apt install php8.1-zip
===================================
python3 -m venv env
source env/bin/activate
pip3 install -r requirements.txt
python3 manage.py runserver 0.0.0.0:8000
=============================
aws configure --profile AmazonCloudWatchAgent
==========================================
Install Azure CLI in Linux
sudo rpm --import https://packages.microsoft.com/keys/microsoft.asc
sudo sh -c 'echo -e "[azure-cli]\nname=Azure CLI\nbaseurl=https://packages.microsoft.com/yumrepos/azure-cli\nenabled=1\ngpgcheck=1\ngpgkey=https://packages.microsoft.com/keys/microsoft.asc" > /etc/yum.repos.d/azure-cli.repo'
sudo yum install -y azure-cli

How to Install Terraform in RHEL, CentOS & Fedora Linux machine
$ sudo yum install -y yum-utils
#### Below $release is "RHEL", "AmazonLinux", or "fedora" As per your OS #####
$ sudo yum-config-manager --add-repo https://rpm.releases.hashicorp.com/$release/hashicorp.repo
$ sudo yum update
$ sudo yum install terraform
###### -------- Verify Installation ---------- ######
$ terraform version

How to login your Azure Subscription and authenticate
az login
az account set --subscription <SUBSCRIPTION_ID>


===================================
EC2_PUBLIC_IP=`curl -s ifconfig.co`
-------------------------------------------
<VirtualHost [IP ADDRESS]:443>
ServerAdmin webmaster@ssl-tutorials.com
DocumentRoot var/www
ServerName www.ssl-tutorials.com
ErrorLog www/home/logs/error_log
SSLEngine on
SSLCertificateFile /etc/ssl/ssl-tutorials_com.crt
SSLCertificateKeyFile /etc/ssl/ssl-tutorials.key
SSLCertificateChainFile /etc/ssl/ssl-tutorials_com.ca-bundle
</VirtualHost> 
=====================
forever list
forever start -c "npm start" ./
forever restartall

------------------------------------
AWSCLI Installation Script
curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
sudo apt install unzip -y
unzip awscliv2.zip
sudo ./aws/install

----------------------------------------------
#! /bin/bash
curl "https://awscli.amazonaws.com/awscli-exe-linux-aarch64.zip" -o "awscliv2.zip"
unzip awscliv2.zip
sudo ./aws/install

-----------------------
#! /bin/bash

sudo apt update
sudo apt install docker.io -y
sudo usermod -aG docker jenkins
sudo usermod -aG docker ubuntu
sudo systemctl restart docker
sudo chmod 777 /var/run/docker.sock


========================================================
https://php.watch/articles/php-8.3-install-upgrade-on-debian-ubuntu
sudo update-alternatives --set php /usr/bin/php8.2 
sudo update-alternatives --set phar /usr/bin/phar8.2 
sudo update-alternatives --set phar.phar /usr/bin/phar.phar8.2 
sudo update-alternatives --set phpize /usr/bin/phpize8.2 
sudo update-alternatives --set php-config /usr/bin/php-config8.2 
systemctl stop apache2
a2dismod php7.4
a2dismod mpm_prefork
a2enmod mpm_event
apt-get install libapache2-mod-fcgid -y
a2enconf php7.4-fpm
a2enmod proxy
a2enmod proxy_fcgi
apachectl -M | grep 'mpm'
# Disable PHP 7.0
sudo a2dismod php8.1
# Output
Module php7.0 disabled.
To activate the new configuration, you need to run:
  systemctl restart apache2
# Enable PHP 8.0
sudo a2enmod php7.4
systemctl restart apache2
=========================
sudo apt-add-repository ppa:xtradeb/apps 
Sudo apt install FileZilla
====================
cat certificate.crt intermediate.crt >> bundle.crt
cat your_domain.crt intermediate.crt root.crt >> ssl-bundle.crt
cat your_domain.crt your_domain.ca-bundle >> ssl-bundle.crt
sudo find nginx.conf
--------------
Install tools for using the Let's Encrypt certificates using Certbot
  sudo apt-get update \
  sudo apt-get install software-properties-common
  sudo add-apt-repository ppa:certbot/certbot
  sudo apt-get update
  sudo apt-get install python-certbot-nginx
----------
server {
    client_max_body_size 100M;
    server_name local.yourhostname;
    listen 443 ssl;
    ssl_certificate /etc/ssl/certs/cert.crt;
    ssl_certificate_key /etc/ssl/private/cert.key;

    location / {
        proxy_pass http://local.yourhostname:8000;
        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-Proto https;
        proxy_read_timeout 60;
        proxy_connect_timeout 60;
        proxy_set_header X-Real-IP $remote_addr;
    }
}
==========
    # CORS Headers
    add_header Access-Control-Allow-Origin "*" always;
    add_header Access-Control-Allow-Methods "GET, POST, OPTIONS, PUT, DELETE" always;
    add_header Access-Control-Allow-Headers "Authorization, Content-Type, X-Requested-With" always;
    add_header Access-Control-Allow-Credentials "true" always;


========================
Nginx
Varnish
Apache Traffic Server
HAProxy
https://kinsta.com/blog/reverse-proxy/
sudo nano /etc/nginx/sites-available/example.com.conf
server {
listen      80;
server_name example.com www.example.com;
index       index.php;
root        /var/www/example.com/public    # fallback for index.php
location / {
try_files $uri $uri/ /index.php?$query_string;
}location /blog {
proxy_pass http://blog.domain.com;proxy_http_version                 1.1;
proxy_cache_bypass                 $http_upgrade;

# Proxy headers
proxy_set_header Upgrade           $http_upgrade;
proxy_set_header Connection        "upgrade";
proxy_set_header Host              $host;
proxy_set_header X-Real-IP         $remote_addr;
proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
proxy_set_header X-Forwarded-Proto $scheme;
proxy_set_header X-Forwarded-Host  $host;
proxy_set_header X-Forwarded-Port  $server_port;

# Proxy timeouts
proxy_connect_timeout              60s;
proxy_send_timeout                 60s;
proxy_read_timeout                 60s;
}
==========
sudo apt-get install nginx -y
The following Nginx packages will be installed on Ubuntu 22:
libnginx-mod-http-geoip2 nginx-common nginx-core nginx-proxy
Setting up nginx 1.18 ubuntu 22... Done
===================================
Start or Run node server with pm2
pm2 start npm --name "app-name" -- start
============================================================================
sudo a2enmod proxy
sudo a2enmod proxy_http
sudo a2enmod proxy_html
sudo systemctl restart apache2

=====================================
cd ~/path/to/your/nodeapp/app.js
 var http = require('http');
 http.createServer(function (request, response) {
    response.writeHead(200, {'Content-Type': 'text/plain'});
    response.end('Node.js is running from site1.\n');
 }).listen(8080);
 console.log('Server running at http://127.0.0.1:8080/');
=======================================
/etc/httpd/conf.modules.d/00-proxy.conf

LoadModule proxy_module modules/mod_proxy.so
LoadModule proxy_http_module modules/mod_proxy_http.so
sudo a2enmod proxy proxy_http 
sudo nano /etc/apache2/sites-available/example.com.conf 

### Redhat based system's 
sudo vim /etc/httpd/conf.d/example.com.conf 
===============
$ a2enmod proxy
$ a2enmod proxy_http
$ a2enmod proxy_ajp
$ a2enmod rewrite
$ a2enmod deflate
$ a2enmod headers
$ a2enmod proxy_balancer
$ a2enmod proxy_connect
$ a2enmod proxy_html

Enable the Apache2 Proxy command 
https://www.atlantic.net/dedicated-server-hosting/how-to-configure-reverse-proxy-for-node-js-application-using-apache-on-ubuntu/
<VirtualHost *:80>
    ServerName your-server-ip

    ProxyRequests Off
    ProxyPreserveHost On
    ProxyVia Full

    <Proxy *>
        Require all granted
    </Proxy>

    ProxyPass / http://127.0.0.1:8000/
    ProxyPassReverse / http://127.0.0.1:8000/
</VirtualHost>
=======================
host_key_checking=False
inventory=/home/ec2-user/host.txt
private_key_file=/home/ec2-user/oskey.pem
[privilege_escalation]
become=yes
become_method=sudo
become_user=root
ask_pass=false

=====================================
myservers:
  hosts:
    server1:
      ansible_host: 192.155.94.211
      ansible_port: 22
      ansible_ssh_user: ansible
      ansible_ssh_private_key_file: ansible.key
      http_host: mydomain.local
      http_conf: mydomain.local.conf
  vars:
    http_port: "80"
===============================================
[myservers]
server1 ansible_host=192.155.94.211 ansible_ssh_user=ansible ansible_ssh_private_key_file=ansible.key http_host=mydomain.local http_conf=mydomain.local.conf

[myservers:vars]
http_port=80

===============================================
<VirtualHost *:80>
<Proxy balancer://mycluster>
    BalancerMember http://127.0.0.1:8080
    BalancerMember http://127.0.0.1:8081
</Proxy>

    ProxyPreserveHost On

    ProxyPass / balancer://mycluster/
    ProxyPassReverse / balancer://mycluster/
</VirtualHost>
=============================================
<VirtualHost *:80>
    ProxyPreserveHost On

    ProxyPass / http://127.0.0.1:8080/
    ProxyPassReverse / http://127.0.0.1:8080/
</VirtualHost>
==================================
 SSLEngine on
  SSLCertificateFile /etc/ssl/certs/example.crt
  SSLCertificateKeyFile /etc/ssl/private/example.key
  SSLCertificateChainFile /etc/ssl/certs/example.ca-bundle
======================
apachectl -M | grep ssl
grep -i -r "SSLCertificateFile" /etc/apache2/

# sudo -u www-data php occ  maintenance:install --database \
"mysql" --database-name "nextcloud"  --database-user "nextcloud" --database-pass \
"passw@rd" --admin-user "admin" --admin-pass "admin123"

https://mailserverguru.com/install-nextcloud-on-ubuntu-22-04-lts/
================
<VirtualHost *:80>

ServerName www.archivomental.com
ServerAlias archivomental.com
DocumentRoot /var/www/archivomental

RewriteEngine On
SSLProtocol all -SSLv2 -SSLv3
SSLCipherSuite HIGH:!aNULL:!MD5
RewriteCond %{HTTPS} off
RewriteRule   "^/(.*)_SSL$"   "https://%{SERVER_NAME}/$1" [R,L]

</VirtualHost>

=============

curl -I --http2 -s https://gutterempire.app/ | grep HTTP
sudo apachectl configtest && sudo service apache2 restart

sudo apt update
sudo apt upgrade
sudo apt install apache2 php7.4-fpm 
sudo a2enmod proxy_fcgi setenvif
sudo a2enconf php7.4-fpm 
sudo a2dismod php7.4 
sudo service apache2 restart
sudo a2dismod mpm_prefork 
sudo a2enmod mpm_event 
sudo service apache2 restart 
sudo service php7.4-fpm restart
sudo a2enmod http2
sudo service apache2 restart
sudo echo "<IfModule http2_module>" > /etc/apache2/conf-available/http2.conf
sudo echo "Protocols h2 h2c http/1.1" >> /etc/apache2/conf-available/http2.conf
sudo echo "H2Direct on" >> /etc/apache2/conf-available/http2.conf
sudo echo "</IfModule>" >> /etc/apache2/conf-available/http2.conf
sudo a2enconf http2
sudo apachectl configtest && sudo service apache2 restart
==============
sudo update-alternatives --set php /usr/bin/php5.6
sudo update-alternatives --config php
sudo update-alternatives --set phar /usr/bin/phar5.6
=============================================================
server {
    listen 80;
    server_name example.com;
    rewrite ^/(.*) https://example.com/$1 permanent;
}
===========================================================

<VirtualHost *:443>
        SSLEngine On
        SSLProtocol All -SSLv2 -SSLv3
        SSLHonorCipherOrder on
 
        # Prefer PFS, allow TLS, avoid SSL, for IE8 on XP still allow 3DES
        SSLCipherSuite "EECDH+ECDSA+AESGCM EECDH+aRSA+AESGCM EECDH+ECDSA+SHA384 EECDH+ECDSA+SHA256 EECDH+aRSA+SHA384 EECDH+aRSA+SHA256 EECDH+AESGCM EECDH EDH+AESGCM EDH+aRSA HIGH !MEDIUM !LOW !aNULL !eNULL !LOW !RC4 !MD5 !EXP !PSK !SRP !DSS"
 
        # Prevent CRIME/BREACH compression attacks
        SSLCompression Off
 
        # Commit to HTTPS only traffic for at least 180 days
        Header add Strict-Transport-Security "max-age=15552000"
        
SSLCertificateFile /etc/apache2/ssl/7abca5c1b8.crt
SSLCertificateKeyFile /etc/apache2/ssl/example.com.key
SSLCertificateChainFile /etc/apache2/ssl/gd_bundle-g2-g1.crt
=======================================
NGINX web server
/etc/nginx/conf.d/phpMyAdmin.conf.
============================================================
htpasswd -c /etc/nginx/.pma_pass username
cat /etc/nginx/.pma_pass
chown nginx:nginx /etc/nginx/.pma_pass
chmod 0660 /etc/nginx/.pma_pass
# auth_basic "phpMyAdmin Login";   # uncomment if using .htaccess & .htpasswd security
# auth_basic_user_file /etc/phpMyAdmin/.phpmyadmin-htpasswd;   # uncomment if using .htaccess & .htpasswd security
========================================================================
   location ~* ^/phpmyadmin/(.+\.(jpg|jpeg|gif|css|png|js|ico|html|xml|txt))$ {
    root /usr/share/;
       }
==================



mysql -u root -p
mysql> CREATE DATABASE roundcubemail;
mysql> CREATE USER 'roundcube'@'localhost' IDENTIFIED BY 'Strong-Password';
mysql> GRANT ALL PRIVILEGES ON roundcubemail . * TO 'roundcube'@'localhost';
mysql> FLUSH PRIVILEGES;
mysql> exit;
==================================
<VirtualHost *:80>
    ServerName subdomain.domain.io
    ProxyPreserveHost On
    ProxyPass "/" "http://localhost:4000/"
    ProxyPassReverse "/" "http://localhost:4000/"
</VirtualHost>


============
sudo yum -y update          # Install the latest system updates.
sudo yum -y install aws-cli # Install the AWS CLI.
aws --version               # Confirm the AWS CLI was installed.
---
sudo apt update             # Install the latest system updates.
sudo apt install -y awscli  # Install the AWS CLI.
aws --version               # Confirm the AWS CLI was installed.

wget https://bootstrap.pypa.io/get-pip.py # Get the pip install file.
sudo python get-pip.py                    # Install pip. (You might need to run 'sudo python2 get-pip.py' or 'sudo python3 get-pip.py' instead, depending on how Python is installed.)
rm get-pip.py                             # Delete the pip install file, as it is no longer needed.

sudo pip install aws-shell

aws s3 mb s3://cloud9-123456789012-bucket # For the AWS CLI.
s3 mb s3://cloud9-123456789012-bucket     # For the aws-shell.

aws s3 rb s3://cloud9-123456789012-bucket # For the AWS CLI.
s3 rb s3://cloud9-123456789012-bucket     # For the aws-shell.

=============================
location /pma {
        alias /var/www/pma; # Adjust to the actual path
        index index.php;

        location ~ \.php$ {
            include fastcgi_params;
            fastcgi_param SCRIPT_FILENAME $request_filename;
            fastcgi_pass unix:/var/run/php/php8.1-fpm.sock; # Adjust for your PHP version
        }
    }
---------
Node.js on an Amazon EC2 Instance
Install node version manager (nvm)
curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.5/install.sh | bash
. ~/.nvm/nvm.sh
nvm install --lts
node -e "console.log('Running Node.js ' + process.version)"

rsync -aHAXxSP   /volume-2/   /volume-3/

<VirtualHost *:80>
        ServerName mydomain.com
        Redirect permanent / https://mydomain.com/

</VirtualHost>

<VirtualHost 3>
     ServerAdmin webmaster@mydomain.com
     <Directory "/home/quardhub/www/mydomain.com/publ">
          Options Indexes FollowSymLinks
          AllowOverride All
          Require all granted
          DirectoryIndex index.html index.php index.htm
     </Directory>
ServerName mydomain.com
DocumentRoot var/www/../public_html
ErrorLog www/home/logs/error_log
CustomLog /usr/www/example/httpd/logs/accesslog combined
Header always set Strict-Transport-Security: max-age=63072000
SSLEngine on
SSLProtocol All -SSLv2 -SSLv3 -TLSv1 -TLSv1.1
SSLHonorCipherOrder On
SSLCipherSuite EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH
SSLCertificateFile /etc/ssl/mydomain.com.crt
SSLCertificateKeyFile /etc/ssl/mydomain.key
SSLCertificateChainFile /etc/ssl/mydomain.com.ca-bundle
</VirtualHost> 


ssl csr genterate
openssl genrsa -out regenbrokersdubai.com.key 2048
openssl req -new -key regenbrokersdubai.com.key -out regenbrokersdubai.com.csr

openssl rsa -in server.key -text > private.pem  	---convert private to pem file
puttygen pemKey.pem -o ppkKey.ppk -O private


$ sudo sed -i -e 's/80/8080/g' /etc/apache2/ports.conf
$ sudo sed -i -e 's/80/8080/g' /etc/apache2/sites-available/*

find . -type f -exec chmod -c 644 {} \; && find . -type d -exec chmod -c 755 {} \;

Let’s now enable these modules with a2enmod command:
sudo a2emod proxy && sudo a2enmod proxy_http && a2enmod ssl
apache2ctl -M
curl -I -k https://magento.example.com/
==========================
How to Setup Passwordless SSH Login
ssh-keygen -t rsa -b 4096 -C "your_email@domain.com"
ls ~/.ssh/id_*
ssh-copy-id remote_username@server_ip_address
cat ~/.ssh/id_rsa.pub | ssh remote_username@server_ip_address "mkdir -p ~/.ssh && chmod 700 ~/.ssh && cat >> ~/.ssh/authorized_keys && chmod 600 ~/.ssh/authorized_keys"
==============================
Disable Apache Prefork module.
sudo a2dismod mpm_prefork
Enable Apache Event module.
sudo a2enmod mpm_event proxy_fcgi setenvif
sudo a2enmod mpm_event proxy_fcgi setenvif
Enable PHP FPM Configuration
Now you can enable PHP-FPM configuration.
sudo a2enconf php8.1-fpm
Enable HTTP2
If you need HTTP 2 support you can enable it also.
sudo a2enmod http2

=======================================
Step 1:-  Connect to your ec2 instance
Step 2-: Install Node version manager
curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.34.0/install.sh | bash
Step 3:-  Activate NVM
. ~/.nvm/nvm.sh
Step 4:- Install the latest version of NodeJs
nvm install node
Step 5:- Test NodeJs
node -e "console.log('Running Node.js ' + process.version)"
=========================================
sudo apt-get install libgtk2.0-0
I installed libexpat but I still got errors. So I had to symlink to bypass and now it works.

su to root, and
ln -sf /usr/lib/libexpat.so.{0,1}
apt depends filezilla
apt install -s filezilla
apt download filezilla-common libfilezilla0 libgail-common libgail18 libgtk2.0-0 libgtk2.0-bin libgtk2.0-common libpugixml1v5 libwxbase3.0-0v5

Finally, install the required library:
sudo apt-get install libgtk2.0-0:i386

$ sudo apt-get install libgtk2.0-0:i386
$ sudo apt-get install --reinstall libgtk2.0-0

sudo ln -sf /opt/filezilla3/bin/filezilla /usr/bin/filezilla


# wget http://sourceforge.net/projects/filezilla/files/FileZilla_Client/3.15.0.1/FileZilla_3.15.0.1_x86_64-linux-gnu.tar.bz2
# tar -jxvf FileZilla_3.15.0.1_x86_64-linux-gnu.tar.bz2
# rm -Rf /usr/bin/filezilla
# ln -s /opt/FileZilla3/bin/filezilla /usr/bin/filezilla
# filezilla

By default PHP 8.1
sudo apt install software-properties-common && sudo add-apt-repository ppa:ondrej/php -y
sudo apt update
$ sudo apt install php8.1-{bcmath,common,curl,fpm,gd,intl,mbstring,mysql,soap,xml,xsl,zip,cli}
$ sudo sed -i "s/memory_limit = .*/memory_limit = 768M/" /etc/php/8.1/fpm/php.ini
$ sudo sed -i "s/upload_max_filesize = .*/upload_max_filesize = 128M/" /etc/php/8.1/fpm/php.ini
$ sudo sed -i "s/zlib.output_compression = .*/zlib.output_compression = on/" /etc/php/8.1/fpm/php.ini
$ sudo sed -i "s/max_execution_time = .*/max_execution_time = 18000/" /etc/php/8.1/fpm/php.ini

grep -i "Out of memory" /var/log/messages | grep -i java

Multiple PHP
sudo apt install software-properties-common -y
sudo add-apt-repository ppa:ondrej/php -y
sudo apt install libapache2-mod-fcgid
sudo apt install php5.6 php5.6-fpm php5.6-mysql libapache2-mod-php5.6
ls -la /var/run/php/
sudo apt install php7.4-common php7.4-mysql php7.4-xml php7.4-xmlrpc php7.4-curl php7.4-gd php7.4-imagick php7.4-cli php7.4-dev php7.4-imap php7.4-mbstring php7.4-opcache php7.4-soap php7.4-zip php7.4-intl -y
sudo systemctl status php7.4-fpm
sudo a2enmod actions fcgid alias proxy_fcgi
We need to add some Apache modules using a2enmod.
actions – used for executing CGI scripts based on media type or request method.
fcgid – a high performance alternative to mod_cgi that starts a sufficient number of instances of the CGI program to handle concurrent requests.
alias – provides for the mapping of different parts of the host filesystem in the document tree, and for URL redirection.
proxy_fcgi – allows Apache to forward requests to PHP-FPM.


----------------------------------------------
Commom locations: /etc/phpmyadmin/config.inc.php
sudo nano /etc/phpmyadmin/config.inc.php
Add the line:
$cfg['ExecTimeLimit'] = 600;

--------------------------------------------
ro  quiet splash $vt_handoff
Now delete and replace that with, rw init=/bin/bash
Once done, press CTRL + X or F10 to boot in single-user mode.
we got the boot partition access as root with a read and write access use this command:
mount | grep -w /
output will be like this:
/dev/sda5 on type ext4 (rw,realtime)
passwd testuser
exec /sbin/init
------------------------------

# usermod -aG sudo sammy
/opt/cpanel/ea-php73/root/usr/bin/php  /opt/cpanel/composer/bin/composer
/opt/alt/php81/usr/bin/php -d memory_limit=-1 /usr/bin/composer require
setfacl -b -R
sudo rsync -avP ~/wordpress/ /var/www/html

sudo a2enmod proxy_fcgi proxy 
sudo a2enmod rewrite
Replace 'default-ssl'
sudo apt-get install openssl
sudo a2enmod ssl
sudo a2ensite default-ssl
nano /etc/apache2/sites-available/example.com.conf 
sudo a2ensite example.com.conf 
sudo systemctl reload apache2 
        <Directory /var/www/html>
        Options FollowSymLinks
        AllowOverride All
        Require all granted
        </Directory>
sudo apt install php7.2-fpm php5.6-fpm
sudo ls -al /var/run/php/
sudo a2enmod actions alias proxy_fcgi fcgid

<FilesMatch \.php$>
        SetHandler "proxy:unix:/run/php/php8.1-fpm.sock|fcgi://localhost/"
</FilesMatch>

sudo apt install php8.2-{fpm,bcmath,xml,mysql,zip,intl,ldap,gd,cli,bz2,curl,mbstring,pgsql,opcache,soap,cgi}

bcmath,xml,fpm,mysql,zip,intl,ldap,gd,cli,bz2,curl,mbstring,pgsql,opcache,soap,cgi,calendar,fpm,Core,ctype,curl,date,dom,fileinfo,filter,ftp,gd,hash,iconv,imap,intl,json,libxml,mbstring,mysqli,mysqlnd,openssl
,pcntl,pcre,PDO,pdo_mysql,pdo_sqlite,Phar,posix,readline,Reflection,session,SimpleXML,soap,sockets,sodium,SPL,sqlite3,standard,tokenizer,xml,xmlreader
,xmlwriter,xsl,Zend,OPcache,zip,zlib

sudo apt install php7.4 libapache2-mod-php7.4 php7.4-mysql php-net-ldap2 php-net-ldap3 php-imagick php7.4-common php7.4-gd php7.4-imap php7.4-json php7.4-curl php7.4-zip php7.4-xml php7.4-mbstring php7.4-bz2 php7.4-intl php7.4-gmp php-net-smtp php-mail-mime php-net-idna2 mailutil

install php php-cli php-fpm php-mysqlnd php-zip php-devel php-gd php-mcrypt php-mbstring php-curl php-xml php-intl php-pear php-bcmath php-net-smtp php-gmp php-mail-mime php-imap php-imagick php-net-ldap2 php-net-ldap3 php-common php-gd php-bz2 php-opcache php-mysql php-json php-pdo php-ldap php-xmlrpc  -y

sudo vi /etc/apache2/apache2.conf
The lines you will need to add are:
# phpMyAdmin Configuration
Include /etc/phpmyadmin/apache.conf
Edit the configuration file for phpMyAdmin. Add AWS RDS endpoint and other server configurations
Sudo vi /etc/phpMyAdmin/config.inc.php
$i++;
    $cfg['Servers'][$i]['host'] = 'endpoint';//Enter IP address or hostname
$cfg['Servers'][$i]['compress'] = false;
$cfg['Servers'][$i]['AllowNoPassword'] = false;
$cfg['Servers'][$i]['connect_type'] = 'tcp';
$cfg['Servers'][$i]['extension'] = 'mysqli'; // Extension to connect to the database.
$cfg['Servers'][$i]['port'] = ''; //The port number of MySQL service $cfg['Servers'][$i]['user'] = ''; // Username to connect
$cfg['Servers'][$i]['password'] = ''; //Password associated with the username

--------------------------------------
How To Add Swap Space on Ubuntu 20.04
sudo swapon --show
sudo fallocate -l 4G /swapfile
ls -lh /swapfile

sudo chmod 600 /swapfile
ls -lh /swapfile
sudo mkswap /swapfile
sudo swapon /swapfile
free -h
sudo cp /etc/fstab /etc/fstab.bak
echo '/swapfile none swap sw 0 0' | sudo tee -a /etc/fstab
------------------------------------------------
Install NodeJS 18 on Ubuntu
curl -s https://deb.nodesource.com/setup_18.x | sudo bash
sudo apt install nodejs -y

 Installing PM2
 sudo npm install pm2@latest -g
 pm2 start hello.js
 pm2 startup systemd
 pm2 save
 pm2 list
--------------------------------------------
install Composer on your system
curl -sS https://getcomposer.org/installer | php
mv composer.phar /usr/bin/composer

curl -sS https://getcomposer.org/installer -o /tmp/composer-setup.php
HASH='curl -sS https://composer.github.io/installer.sig'
echo $HASH
php -r "if (hash_file('SHA384', '/tmp/composer-setup.php') === '$HASH') { echo 'Installer verified'; } else { echo 'Installer corrupt'; unlink('composer-setup.php'); } echo PHP_EOL;"
sudo php composer-setup.php --install-dir=/usr/bin --filename=composer
-------------------------------------------
sudo vim /usr/share/phpmyadmin/.htaccess
AuthType Basic
AuthName "Restricted Files"
AuthUserFile /etc/phpmyadmin/.htpasswd
Require valid-user

sudo htpasswd -c /etc/phpmyadmin/.htpasswd admin
now Enable mod_rewrite
sudo a2enmod rewrite
sudo service apache2 restart
-------------------------------------
# Switch PHP
sudo update-alternatives --config php
# Switch
sudo update-alternatives --config phar
# Switch
sudo update-alternatives --config phar.phar
# Disable PHP 7.0
sudo a2dismod php7.0
# Enable PHP 8.0
sudo a2enmod php8.0
# Install FCGID
sudo apt install libapache2-mod-fcgid


Install Web Server
CREATE USER 'magento'@'localhost' IDENTIFIED WITH mysql_native_password BY 'm0d1f1257';
CREATE DATABASE magentodb;
GRANT ALL PRIVILEGES ON magentodb.* TO 'magento'@'localhost';
FLUSH PRIVILEGES;
mysql> \q


file_uploads = On
allow_url_fopen = On
short_open_tag = On
date.timezone = Asia/Singapore
memory_limit = 1G
max_execution_time = 1800
max_input_time = 360
max_input_vars = 5000
upload_max_filesize = 256M
post_max_size = 192M
disable_functions =
session.save_path = "/tmp"
zlib.output_compression = On


grep -i -r "SSLCertificateFile" /etc/apache2/

cgi.fix_pathinfo = 0

opcache.enable=1 
opcache.save_comments = 1
---------------------
Country Name (2 letter code) [AU]:US
State or Province Name (full name) [Some-State]:New York
Locality Name (eg, city) []:New York
Organization Name (eg, company) [Internet Widgits Pty Ltd]:My Company
Organizational Unit Name (eg, section) []:
Common Name (e.g. server FQDN or YOUR name) []:example.com
Email Address []:sammy@example.com

SSLCertificateFile /etc/apache2/ssl/7abca5c1b8.crt
SSLCertificateKeyFile /etc/apache2/ssl/example.com.key
SSLCertificateChainFile /etc/apache2/ssl/gd_bundle-g2-g1.crt

-------------
Combine all the certificates into a single file
$ cat your_domain.crt your_domain.ca-bundle >> your_domain_chain.crt

$ cat your_domain.crt > your_domain_chain.crt ; echo >> your_domain_chain.crt ; cat your_domain.ca-bundle >> your_domain_chain.crt

listen 443;
ssl on;
ssl_certificate /path/to/certificate/your_domain_chain.crt;
ssl_certificate_key /path/to/your_private.key;
root /path/to/webroot;
server_name your_domain.com www.your_domain.com;
}

-----------------------------
sudo vim /etc/apache2/sites-available/000-default.conf
<VirtualHost *:80>
    ServerName example.com
    ServerAlias www.example.com
    DocumentRoot /var/www/html
 
    <Directory /var/www/html>
        Options -Indexes +FollowSymLinks +MultiViews
        AllowOverride All
        Require all granted
    </Directory>
 
    <FilesMatch \.php$>
        # 2.4.10+ can proxy to unix socket
        SetHandler "proxy:unix:/var/run/php/php7.4-fpm.sock|fcgi://localhost"
    </FilesMatch>
 
    ErrorLog ${APACHE_LOG_DIR}/error.log
    CustomLog ${APACHE_LOG_DIR}/access.log combined
</VirtualHost>

sudo systemctl restart apache2
echo "<?php phpinfo(); ?>" > /var/www/html/info.php
================
MySQL: 3306
Oracle: 1521
PostgreSQL: 5432
Redshift: 5439
Microsoft SQL Server: 1433
MongoDB: 27017
Teradata: 1025
Cassandra: 90
Clear Route Cache

php artisan cache:clear
php artisan view:clear
php artisan view:clear
php artisan route:clear
php artisan cache:clear
php artisan config:cache
-------------------
# journalctl -n 5
# journalctl -p err
# journalctl -f


cat > /root/.my.cnf << EOF
[Client]
password=$mycnf
user=root


ps -eo pid,ppid,cmd,%mem,%cpu --sort=-%mem | head 

PHP  use mysqli_connect instead)
grep -Rli mysql_connect
WordPress – wp-config.php
Drupal – sites/default/settings.php
Joomla – configuration.php
Magento – app/etc/local.xml
OpenCart – admin/config.php
phpBB – config.php
Prestashop – app/config/parameters.php
WHMCS – configuration.php
Laravel – config/database.php
Laravel/php -.env



fdisk -l
pvdisplay
vgdisplay
pvcreate /dev/sdc
lvmdiskscan -l
vgextend vg0 /dev/sdc
df -h
lvm lvextend -l +100%FREE /dev/mapper/vg0-vg--root
resize2fs -p /dev/mapper/vg0-vg--root


rsync -avzh --progress -e "ssh -p22" 2023-03-05 root@:/home/
dmesg | grep –i "Out of memory“ (/var/log/messages OR /var/log/syslog)

HISTTIMEFORMAT="%d/%m/%y %T "

sync; echo 1 > /proc/sys/vm/drop_caches
sync; echo 2 > /proc/sys/vm/drop_caches
sync; echo 3 > /proc/sys/vm/drop_caches  

find . -type d -exec chmod u=rwx,g=rx,o=rx '{}' \;
find . -type f -exec chmod u=rw,g=r,o=r '{}' \;

openssl rsa -in server.key -text > private.pem      ---convert private to pem file
puttygen pemKey.pem -o ppkKey.ppk -O private
puttygen server1.ppk -O private-openssh -o server1.pem   


<VirtualHost *:443>
DocumentRoot /var/www/html
SSLEngine on
SSLCertificateFile /opt/ssl/file.crt
SSLCertificateKeyFile /opt/ssl/file.key
SSLCertificateChainFile /opt/ssl/bundal.crt
</VirtualHost>

sudo apt install php7.4 libapache2-mod-php7.4 php7.4-common php7.4-gmp php7.4-curl php7.4-intl php7.4-mbstring php7.4-xmlrpc php7.4-mysql php7.4-gd php7.4-bcmath php7.4-xml php7.4-cli php7.4-zip

SELECT user,authentication_string,plugin,host FROM mysql.user;
ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'UserPassword';


ssh-keygen -f ~/.ssh/id_rsa -N ""
ssh-copy-id ikus@192.168.0.45

tar -cvf backup.tar /path/to/directory
rsync -avz --progress -e ssh /path/to/local/Documents/ user@192.168.0.100:/backup


mysql> FLUSH PRIVILEGES;
mysql> SELECT user,authentication_string,plugin,host FROM mysql.user;
CREATE USER 'newuser'@'localhost' IDENTIFIED BY 'password';
GRANT ALL PRIVILEGES ON * . * TO 'newuser'@'localhost';


db.createUser(
{ user: "dbuser",
  pwd: "passw0rd",

  roles:[{role: "userAdminAnyDatabase" , db:"database"}]})



  db.grantRolesToUser('dbuser', [{ role: 'readWrite', db: 'databaase' }]);
---------------------------------------------------------------------
db.createUser(
  {
    user: "user",
    pwd: "s2s",
    roles: [ { role: "userAdminAnyDatabase", db: "admin" }, "readWriteAnyDatabase" ]
  }
)
sudo ${EDITOR:-vi} /etc/mongod.conf
security:
  authorization: enabled
-------------------------

Creating Administrative MongoDB User
use admin
switched to db admin
db.createUser(
  {
    user: "MongoAdmin",
    pwd: passwordPrompt(),
    roles: [
      { role: "userAdminAnyDatabase", db: "admin" },
      { role: "readWriteAnyDatabase", db: "admin" }
    ]
  }
)
==================================

mysql -u root -p
# systemctl stop mariadb
# systemctl disable mariadb
# systemctl status mariadb
# mysqld-safe --skip-grant-tables &
# mysql
# show databases;
# use mysql;
# show tables;
# select user, host, password from user;
# update user set password=password('redhat') where user='root' and host= 'localhost';
# exit
# mysqladmin -u root -p shutdown
# system start mariadb
# systemctl enable mariadb



Manage multiple MySql server using single phpmyadmin
mysql> CREATE USER 'phpmaroot'@'%' IDENTIFIED BY 'pmapass123!';
mysql> GRANT ALL PRIVILEGES ON *.* TO phpmaroot@'%';

cp /etc/phpmyadmin/config.inc.php /etc/phpmyadmin/config.inc.php.bak
Find and uncomment the line below:
//$cfg['Servers'][$i]['AllowNoPassword'] = TRUE;
$cfg['Servers'][$i]['AllowNoPassword'] = TRUE;

====================================================
or create a new repository on the command line
echo "# ansible-server" >> README.md
git init
git add README.md
git commit -m "first commit"
git branch -M main
git remote add origin https://github.com/basant0017/ansible-server.git
git push -u origin main
…or push an existing repository from the command line
git remote add origin https://github.com/basant0017/ansible-server.git
git branch -M main
git push -u origin main

===========================================
